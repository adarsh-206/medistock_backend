"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.actuate = exports.doSetup = void 0;
const yaml = require("yaml");
const fs = require("fs");
const clc = require("colorette");
const prompt_1 = require("../../../prompt");
const fileUtils_1 = require("../../../dataconnect/fileUtils");
const load_1 = require("../../../dataconnect/load");
const logger_1 = require("../../../logger");
const dataconnectEmulator_1 = require("../../../emulator/dataconnectEmulator");
const error_1 = require("../../../error");
const IOS = "ios";
const WEB = "web";
const ANDROID = "android";
async function doSetup(setup, config) {
    const sdkInfo = await askQuestions(setup, config);
    await actuate(sdkInfo, setup.projectId);
}
exports.doSetup = doSetup;
async function askQuestions(setup, config) {
    var _a, _b, _c, _d, _e, _f, _g, _h;
    const serviceCfgs = (0, fileUtils_1.readFirebaseJson)(config);
    const serviceInfos = await Promise.all(serviceCfgs.map((c) => (0, load_1.load)(setup.projectId || "", config, c.source)));
    const connectorChoices = serviceInfos
        .map((si) => {
        return si.connectorInfo.map((ci) => {
            return {
                name: `${si.dataConnectYaml.serviceId}/${ci.connectorYaml.connectorId}`,
                value: ci,
            };
        });
    })
        .flat();
    if (!connectorChoices.length) {
        throw new error_1.FirebaseError(`Your config has no connectors to set up SDKs for. Run ${clc.bold("firebase init dataconnect")} to set up a service and conenctors.`);
    }
    const connectorInfo = await (0, prompt_1.promptOnce)({
        message: "Which connector do you want set up a generated SDK for?",
        type: "list",
        choices: connectorChoices,
    });
    const platforms = await (0, prompt_1.promptOnce)({
        message: "Which platforms do you want to set up a generated SDK for?",
        type: "checkbox",
        choices: [
            { name: "iOS (Swift)", value: IOS },
            { name: "Web (JavaScript)", value: WEB },
            { name: "Androd (Kotlin)", value: ANDROID },
        ],
    });
    const newConnectorYaml = JSON.parse(JSON.stringify(connectorInfo.connectorYaml));
    if (!newConnectorYaml.generate) {
        newConnectorYaml.generate = {};
    }
    if (platforms.includes(IOS)) {
        const outputDir = await (0, prompt_1.promptOnce)({
            message: `What directory do you want to write your Swift SDK code to? (If not absolute, path will be relative to '${connectorInfo.directory}')`,
            type: "input",
            default: ((_a = newConnectorYaml.generate.swiftSdk) === null || _a === void 0 ? void 0 : _a.outputDir) ||
                `./../.dataconnect/generated/${newConnectorYaml.connectorId}/swift-sdk`,
        });
        const swiftSdk = { outputDir };
        newConnectorYaml.generate.swiftSdk = swiftSdk;
    }
    if (platforms.includes(WEB)) {
        const outputDir = await (0, prompt_1.promptOnce)({
            message: `What directory do you want to write your JavaScript SDK code to? (If not absolute, path will be relative to '${connectorInfo.directory}')`,
            type: "input",
            default: ((_b = newConnectorYaml.generate.javascriptSdk) === null || _b === void 0 ? void 0 : _b.outputDir) ||
                `./../.dataconnect/generated/${newConnectorYaml.connectorId}/javascript-sdk`,
        });
        const pkg = await (0, prompt_1.promptOnce)({
            message: "What package name do you want to use for your JavaScript SDK?",
            type: "input",
            default: (_d = (_c = newConnectorYaml.generate.javascriptSdk) === null || _c === void 0 ? void 0 : _c.package) !== null && _d !== void 0 ? _d : `@firebasegen/${connectorInfo.connectorYaml.connectorId}`,
        });
        const packageJSONDir = await (0, prompt_1.promptOnce)({
            message: "Which directory contains the package.json that you would like to add the JavaScript SDK dependency to? (Leave blank to skip)",
            type: "input",
            default: (_e = newConnectorYaml.generate.javascriptSdk) === null || _e === void 0 ? void 0 : _e.packageJSONDir,
        });
        const javascriptSdk = {
            outputDir,
            package: pkg,
        };
        if (packageJSONDir) {
            javascriptSdk.packageJSONDir = packageJSONDir;
        }
        newConnectorYaml.generate.javascriptSdk = javascriptSdk;
    }
    if (platforms.includes(ANDROID)) {
        const outputDir = await (0, prompt_1.promptOnce)({
            message: `What directory do you want to write your Kotlin SDK code to? (If not absolute, path will be relative to '${connectorInfo.directory}')`,
            type: "input",
            default: ((_f = newConnectorYaml.generate.kotlinSdk) === null || _f === void 0 ? void 0 : _f.outputDir) ||
                `./../.dataconnect/generated/${newConnectorYaml.connectorId}/kotlin-sdk/src/main/kotlin/${newConnectorYaml.connectorId}`,
        });
        const pkg = await (0, prompt_1.promptOnce)({
            message: "What package name do you want to use for your Kotlin SDK?",
            type: "input",
            default: (_h = (_g = newConnectorYaml.generate.kotlinSdk) === null || _g === void 0 ? void 0 : _g.package) !== null && _h !== void 0 ? _h : `com.google.firebase.dataconnect.connectors.${connectorInfo.connectorYaml.connectorId}`,
        });
        const kotlinSdk = {
            outputDir,
            package: pkg,
        };
        newConnectorYaml.generate.kotlinSdk = kotlinSdk;
    }
    const shouldGenerate = !!(setup.projectId &&
        (await (0, prompt_1.confirm)({
            message: "Would you like to generate SDK code now?",
            default: true,
        })));
    const connectorYamlContents = yaml.stringify(newConnectorYaml);
    return { connectorYamlContents, connectorInfo, shouldGenerate };
}
async function actuate(sdkInfo, projectId) {
    const connectorYamlPath = `${sdkInfo.connectorInfo.directory}/connector.yaml`;
    fs.writeFileSync(connectorYamlPath, sdkInfo.connectorYamlContents, "utf8");
    logger_1.logger.info(`Wrote new config to ${connectorYamlPath}`);
    if (projectId && sdkInfo.shouldGenerate) {
        await dataconnectEmulator_1.DataConnectEmulator.generate({
            configDir: sdkInfo.connectorInfo.directory,
            connectorId: sdkInfo.connectorInfo.connectorYaml.connectorId,
        });
        logger_1.logger.info(`Generated SDK code for ${sdkInfo.connectorInfo.connectorYaml.connectorId}`);
    }
}
exports.actuate = actuate;
